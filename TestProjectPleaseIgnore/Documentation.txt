***********************************************************
TPPI DOCUMENTATION FILE

CONTENTS

	Summary
	List of classes
	Journal Class Memebers
		Associated Algorithms
	Topics Class Memebers
		Associated Algorithms
		
***********************************************************

SUMMARY OF PROGRAM STATE PRIOR TO EDITING

	The program was recieved in a semi-workig condition. 80% of the program's features were working but the source code was un organized and convoluted. An additional form was created to add topics as a final feature to round out the application.
	Listed below is an outline of the two classes used to create the program and their associated memebers along with sudo code for the methods algorithms.  

=====================================================================================

LIST OF CLASSES

1. Journal.cs
2. Topics.cs

=====================================================================================

JOURNAL CLASS MEMEBERS

Global Variables:

	activeID: int
	totalRows: int
	cString: string
	dbConn: OleDbConnection
	dbCmd: OleDbCommand
	dbAdapter: OleDbAdapter
	ds: DataSet

Methods:

	Journal()
		Class constructor

	Journal_Load()
		Load data to screen runs multiple methods. 
			loadComboBod(ds)
			dbConn.Open()
			getThenLoadData(query)
			getRecordCount()
			dbConn.Close()

	# UTILITY METHODS
		
		getThenLoadData(string)
			It's function is to query the database and return then populate the date, combo box id, entry details and active entry ID. 
			This method takes a unique query as string parameter.

			### Algorithm:
				1. Instantiate db command then pass query and db connection
				2. create reader variable and set to db command execute reader method
				3. read
				4. set date, selected topic value, topic description, active journal id.

		getRecordCount()
			It's function is to query the database then return and populate the total rows and record count text field.

			### Algorithm:
				1. create query string
					** SELECT everything from journal totals 
				2. instantiate db command and pass query + db connection 
				3. create reader variable
				4. reader reads
				5. set total rows , lbl record count text to data received from query


		loadComboBox(DataSet)
			It's function is called when the user changes the combo box selection. The method will query the database and return data souce index, topic descriptor and topic id.

			## Algorithm:
				1. create query string
					** SELECT everything from topics table
				2. create db connection pass connection string
				3. create db adapter pass query + db connection
				4. open db connection
				5. fill data adapter with dataset
				6. set combo box data source 
				7. set combo box display member = topic description
				8. set combo box value memeber = topic id
				9. close db connection

		conCmdExcQry(string)
			This method exists to quickly send a query to the database. Used by the save button, delete entry button and again in the topics class save button. Takes the query as a string parameter.

			## Algorithm:
				1. instantiate db connection with connection string
				2. instantiate db command with query + db connection
				3. open connection
				4. execute non query command 

		DataProblem(Exception)
			Throws exception when data is missing on invalid.

			## Algorithm:
				1. show message box with "Data problem: " + exeception mesage
				2. close data base connection

		dateTimePicker1_ValueChanged(Event)
			Used to display current date and set the data text field of the journal entry.

			## Algorithm:
				1. create result definition of type DateTime set to date time picker value
				2. set date text = result

	# EVENT CLICK METHODS
		btnFirst_Click(Event)
			Used to navigate to the first journal entry.
			## Algorithm:
				1. create query string 
				2. open db connection
				3. run getThenLoadData method and pass query string.
				4. close db connection

		btnLast_Click(Event)
			Used to navigate to the last journal entry.
			## Algorithm:
				1. create query string 
				2. open db connection
				3. run getThenLoadData method and pass query string.
				4. close db connection

		btnPrev_Click(Event)
			Used to navigate to the previous journal entry.
			## Algorithm:
				1. create query string 
				2. open db connection
				3. run getThenLoadData method and pass query string.
				4. close db connection

		btnNext_Click(Event)
			Used to navigate to the next journal entry.
			## Algorithm:
				1. create query string 
				2. open db connection
				3. run getThenLoadData method and pass query string.
				4. close db connection

		btnNewTopic_Click(Event)
			Used to create a new topic in the combox box.

			## Algorithm:
				1. instantiate new topics form
				2. show form

		btnNewRecord_Click(Event)
			Used to prepare the data entry field for a new record.

			## Algorithm:
				1. Set active id to 0
				2. Set record count label to "record" + active id + "of" + total rows
				3. clear date field
				4. clear topic text

		btnSave_Click(Event)
			Used to save new data and update data of the current entry.

			##Algorithm:
				1. if active id is equal to 0 then >>
					1. insert provided details into journals table
					2. run conCmdExcQry() method
					3. close db connection
					4. run btnLast_Click event method

					else >>
						1. update provided details into journals table for the current active id.
						2. run conCmdExcQry() method
						3. close db connection
						4. run btnLast_Click event method

		btnDelete_Click(Event)
			Used to delete the current journal entry.

			##Algorithm:
				1. create query string
					** Delete everything from journals table where journal id = active ids
				2. run conCmdExcQry(query) 
				3. run btnLast_Click() event method

============================================================================================

Topics Class Members

Global Variables:  N/A
		
Methods:
	
	Topics()
		Class constructor.

	btnSave_Click(Event)
		Used to save the new topic to the topics table in database.

		## Algorithm:
			1.create query string
				** Insert into topics table topic description
			2. run conCmdExcQry(query)
			3. show message box - success message
			4. close form
	
